#include <openfhe.h>
#include <vector>

using namespace lbcrypto;

std::vector < std::vector <int64_t> > vectorA = {
    {30, 42, 47, 45, 98, 65, 99, 1, 31, 19, 72, 10, 27, 33, 87, 98, 10, 40, 31, 38, 59, 5, 62, 68, 61, 99, 12, 49, 56, 45, 9, 46},
    {7, 29, 82, 75, 48, 89, 40, 2, 26, 20, 21, 58, 54, 48, 28, 85, 95, 31, 80, 11, 21, 58, 29, 49, 90, 4, 24, 74, 90, 96, 90, 89},
    {50, 28, 93, 12, 62, 89, 52, 56, 74, 49, 44, 75, 13, 31, 33, 64, 11, 74, 5, 95, 66, 66, 36, 14, 84, 92, 20, 71, 35, 96, 6, 64},
    {26, 22, 45, 56, 78, 21, 38, 49, 82, 98, 13, 95, 11, 37, 24, 41, 67, 24, 63, 10, 5, 64, 37, 31, 60, 100, 24, 21, 83, 3, 43, 0},
    {83, 28, 43, 48, 15, 89, 48, 58, 41, 87, 77, 10, 77, 67, 74, 34, 77, 1, 65, 81, 8, 7, 26, 11, 85, 5, 61, 19, 35, 46, 31, 39},
    {42, 46, 33, 94, 64, 2, 65, 78, 31, 76, 62, 45, 36, 93, 68, 83, 62, 79, 83, 33, 70, 38, 17, 7, 14, 20, 2, 12, 11, 6, 15, 26},
    {48, 90, 84, 99, 90, 27, 20, 65, 51, 34, 17, 28, 53, 46, 81, 5, 22, 61, 48, 17, 81, 51, 72, 31, 86, 67, 54, 94, 48, 45, 62, 85},
    {100, 28, 9, 61, 46, 75, 26, 77, 56, 24, 86, 85, 92, 79, 1, 56, 25, 15, 90, 68, 9, 17, 64, 55, 23, 93, 81, 62, 68, 2, 85, 9},
    {72, 97, 60, 24, 73, 67, 63, 82, 63, 13, 80, 81, 90, 85, 60, 18, 9, 11, 15, 1, 11, 16, 43, 81, 84, 63, 58, 82, 86, 68, 42, 98},
    {12, 72, 5, 18, 15, 58, 82, 39, 67, 41, 10, 76, 7, 76, 52, 30, 39, 53, 35, 65, 81, 43, 25, 19, 54, 1, 13, 6, 28, 54, 16, 21},
    {70, 15, 8, 85, 38, 86, 56, 14, 38, 87, 97, 86, 46, 60, 96, 21, 60, 70, 64, 58, 15, 86, 95, 41, 33, 60, 9, 72, 51, 98, 76, 69},
    {27, 42, 66, 55, 73, 42, 51, 87, 38, 53, 41, 80, 72, 20, 63, 86, 4, 27, 50, 34, 34, 11, 10, 63, 40, 96, 32, 74, 41, 18, 39, 98},
    {1, 98, 31, 63, 74, 36, 15, 2, 67, 7, 57, 90, 66, 51, 31, 69, 18, 74, 61, 36, 13, 57, 61, 61, 83, 64, 2, 12, 14, 6, 52, 8},
    {73, 69, 60, 64, 96, 66, 43, 94, 93, 24, 97, 35, 12, 28, 86, 50, 100, 2, 34, 37, 83, 31, 14, 88, 82, 10, 78, 65, 40, 78, 84, 54},
    {11, 62, 85, 11, 3, 39, 52, 49, 48, 23, 60, 36, 52, 81, 21, 77, 96, 52, 100, 36, 83, 84, 99, 45, 94, 40, 1, 18, 9, 76, 99, 87},
    {31, 71, 93, 45, 91, 10, 33, 58, 88, 45, 94, 6, 0, 94, 98, 31, 83, 4, 6, 58, 8, 22, 53, 28, 61, 62, 36, 88, 83, 95, 69, 6},
    {86, 82, 100, 5, 77, 74, 90, 13, 3, 88, 46, 38, 93, 16, 37, 43, 6, 91, 97, 79, 53, 23, 35, 16, 56, 52, 14, 5, 74, 66, 94, 98},
    {98, 63, 58, 11, 28, 49, 70, 38, 46, 76, 3, 36, 95, 3, 51, 16, 31, 14, 45, 25, 19, 38, 41, 12, 98, 97, 75, 20, 49, 7, 58, 98},
    {48, 40, 0, 27, 7, 54, 63, 83, 66, 94, 24, 67, 84, 67, 74, 95, 9, 97, 98, 93, 31, 91, 28, 62, 54, 66, 72, 47, 47, 14, 62, 91},
    {76, 70, 85, 27, 67, 62, 84, 93, 72, 34, 22, 0, 27, 50, 6, 33, 54, 75, 3, 80, 20, 99, 19, 15, 32, 92, 1, 54, 16, 21, 67, 85},
    {77, 59, 78, 63, 95, 12, 62, 90, 35, 76, 49, 54, 77, 63, 50, 78, 8, 88, 66, 42, 73, 79, 70, 4, 70, 33, 24, 72, 9, 32, 45, 25},
    {95, 64, 66, 24, 46, 22, 35, 81, 95, 85, 27, 93, 62, 89, 20, 22, 9, 38, 97, 44, 42, 11, 72, 92, 49, 65, 19, 95, 32, 2, 35, 94},
    {46, 14, 51, 33, 54, 75, 43, 78, 30, 44, 88, 26, 36, 10, 53, 85, 61, 40, 39, 64, 91, 55, 21, 46, 54, 23, 53, 82, 60, 32, 88, 26},
    {12, 38, 70, 21, 32, 56, 76, 30, 4, 35, 30, 24, 25, 33, 65, 11, 3, 25, 50, 79, 57, 44, 46, 39, 81, 78, 3, 83, 30, 97, 67, 13},
    {76, 4, 37, 39, 74, 84, 32, 51, 11, 33, 43, 37, 98, 99, 71, 95, 97, 73, 79, 74, 82, 13, 6, 29, 51, 50, 49, 82, 100, 49, 67, 17},
    {37, 69, 74, 100, 100, 19, 78, 49, 55, 94, 24, 97, 59, 83, 97, 50, 0, 5, 52, 95, 92, 81, 70, 56, 86, 31, 68, 9, 42, 38, 73, 8},
    {99, 81, 95, 9, 85, 38, 18, 60, 81, 77, 69, 74, 96, 94, 54, 19, 30, 29, 82, 34, 92, 60, 41, 92, 5, 99, 56, 29, 86, 25, 90, 15},
    {46, 44, 21, 87, 43, 39, 18, 89, 0, 74, 93, 59, 92, 81, 45, 34, 91, 87, 13, 37, 21, 77, 52, 9, 67, 99, 70, 20, 34, 25, 66, 34},
    {73, 88, 27, 9, 32, 15, 65, 48, 48, 71, 9, 53, 6, 10, 3, 54, 93, 88, 54, 47, 81, 24, 82, 40, 46, 71, 39, 71, 79, 92, 11, 11},
    {20, 4, 47, 96, 43, 90, 12, 85, 58, 0, 8, 45, 81, 60, 51, 69, 13, 29, 63, 15, 29, 97, 17, 36, 50, 48, 41, 76, 66, 90, 37, 97},
    {65, 2, 66, 6, 4, 60, 59, 76, 56, 13, 2, 36, 6, 69, 32, 17, 90, 72, 5, 89, 74, 89, 0, 32, 65, 43, 96, 65, 13, 16, 32, 11},
    {95, 49, 31, 28, 7, 52, 17, 6, 66, 93, 51, 0, 51, 81, 14, 73, 12, 78, 42, 44, 17, 57, 28, 38, 75, 45, 6, 62, 49, 99, 7, 8}
};
std::vector < std::vector <int64_t> > vectorB = {
    {86, 94, 12, 83, 95, 10, 22, 17, 24, 42, 37, 57, 75, 27, 51, 13, 76, 9, 47, 24, 4, 51, 65, 75, 47, 59, 13, 19, 9, 19, 88, 49},
    {33, 70, 43, 50, 56, 83, 33, 27, 54, 10, 65, 100, 96, 29, 64, 81, 0, 9, 56, 84, 80, 54, 89, 68, 13, 92, 4, 58, 71, 19, 53, 38},
    {99, 52, 2, 63, 19, 1, 41, 3, 10, 26, 22, 92, 1, 23, 32, 87, 99, 30, 18, 7, 21, 18, 96, 90, 64, 60, 63, 34, 94, 63, 6, 2},
    {5, 6, 43, 74, 82, 39, 76, 39, 5, 17, 53, 13, 51, 4, 9, 17, 81, 71, 66, 66, 48, 41, 87, 37, 39, 84, 98, 98, 2, 40, 19, 23},
    {14, 11, 85, 7, 37, 57, 78, 16, 48, 14, 4, 84, 59, 91, 81, 46, 81, 86, 15, 50, 67, 43, 81, 12, 10, 49, 86, 12, 77, 5, 32, 37},
    {47, 44, 82, 77, 100, 25, 82, 76, 35, 37, 45, 79, 69, 65, 60, 99, 85, 68, 22, 14, 56, 38, 91, 92, 28, 50, 34, 77, 63, 89, 2, 52},
    {1, 20, 84, 98, 6, 0, 76, 40, 46, 20, 33, 63, 65, 96, 60, 51, 35, 7, 6, 15, 96, 74, 59, 47, 88, 84, 24, 34, 35, 67, 83, 44},
    {47, 72, 77, 39, 49, 49, 46, 57, 78, 35, 70, 100, 1, 33, 6, 60, 69, 20, 4, 11, 62, 2, 84, 79, 56, 49, 31, 0, 82, 56, 52, 43},
    {24, 17, 20, 76, 60, 57, 95, 18, 98, 92, 23, 95, 35, 87, 90, 73, 43, 64, 23, 19, 44, 53, 34, 72, 88, 48, 94, 68, 33, 83, 76, 1},
    {14, 67, 15, 100, 48, 13, 13, 39, 95, 55, 20, 81, 72, 5, 3, 57, 66, 51, 52, 23, 30, 19, 93, 26, 76, 47, 72, 85, 38, 59, 73, 21},
    {33, 97, 6, 20, 72, 61, 79, 23, 66, 44, 6, 36, 38, 37, 42, 7, 90, 23, 18, 22, 98, 48, 78, 95, 11, 22, 6, 76, 8, 27, 61, 25},
    {39, 18, 52, 49, 59, 44, 96, 86, 35, 60, 76, 31, 15, 89, 85, 84, 66, 100, 10, 57, 74, 95, 60, 3, 41, 27, 56, 47, 54, 58, 54, 17},
    {1, 37, 32, 25, 91, 71, 23, 76, 28, 94, 50, 58, 18, 9, 68, 62, 77, 40, 97, 10, 7, 25, 76, 28, 62, 47, 53, 60, 12, 5, 80, 65},
    {45, 30, 49, 47, 58, 92, 74, 85, 55, 80, 18, 30, 60, 6, 73, 32, 43, 38, 84, 70, 26, 47, 43, 43, 61, 0, 91, 81, 32, 76, 52, 70},
    {83, 56, 70, 70, 93, 69, 64, 44, 82, 95, 22, 85, 66, 95, 43, 77, 1, 15, 36, 58, 9, 77, 9, 54, 58, 66, 38, 21, 33, 80, 76, 88},
    {44, 31, 24, 71, 15, 79, 79, 69, 25, 70, 71, 1, 40, 100, 74, 97, 35, 77, 84, 47, 17, 74, 79, 20, 3, 81, 66, 54, 24, 70, 26, 32},
    {60, 44, 37, 21, 68, 78, 61, 34, 95, 74, 60, 48, 33, 91, 44, 42, 54, 91, 54, 70, 51, 83, 78, 0, 28, 81, 38, 2, 40, 14, 58, 11},
    {47, 18, 26, 96, 92, 58, 64, 44, 69, 18, 58, 66, 25, 24, 4, 52, 95, 12, 93, 15, 67, 15, 98, 63, 90, 61, 12, 59, 62, 54, 99, 26},
    {10, 5, 78, 65, 37, 91, 53, 23, 45, 86, 37, 81, 36, 15, 42, 11, 57, 90, 74, 69, 86, 23, 37, 41, 70, 62, 6, 86, 14, 6, 41, 64},
    {66, 74, 64, 84, 10, 76, 38, 3, 24, 74, 45, 36, 59, 4, 52, 97, 56, 58, 42, 15, 53, 75, 28, 97, 33, 87, 55, 41, 81, 82, 10, 69},
    {27, 27, 88, 34, 54, 5, 12, 26, 36, 86, 47, 22, 31, 80, 61, 72, 74, 78, 20, 86, 25, 89, 97, 76, 55, 2, 90, 43, 43, 73, 73, 49},
    {26, 58, 23, 27, 26, 63, 46, 19, 10, 93, 60, 61, 53, 25, 18, 4, 98, 52, 68, 55, 71, 40, 51, 17, 68, 25, 39, 60, 40, 52, 32, 49},
    {44, 5, 66, 62, 31, 66, 78, 50, 34, 67, 91, 21, 39, 34, 10, 1, 40, 2, 46, 15, 56, 95, 39, 3, 46, 54, 51, 76, 92, 27, 28, 54},
    {35, 88, 89, 73, 28, 77, 38, 36, 20, 96, 41, 99, 26, 82, 90, 92, 61, 75, 68, 71, 73, 46, 91, 80, 75, 14, 5, 10, 50, 41, 14, 95},
    {46, 58, 40, 25, 99, 83, 17, 45, 1, 28, 5, 36, 0, 12, 97, 6, 64, 78, 9, 93, 95, 71, 19, 62, 82, 8, 16, 1, 90, 0, 97, 79},
    {14, 26, 7, 23, 78, 20, 79, 83, 54, 76, 58, 60, 50, 22, 75, 23, 48, 76, 97, 9, 71, 1, 16, 58, 27, 43, 83, 71, 3, 31, 82, 99},
    {52, 51, 60, 99, 44, 39, 23, 81, 58, 69, 30, 66, 85, 86, 91, 65, 1, 42, 5, 99, 43, 95, 62, 86, 69, 80, 64, 43, 100, 9, 6, 74},
    {4, 24, 36, 67, 88, 83, 39, 83, 51, 84, 64, 13, 75, 85, 89, 47, 19, 44, 83, 88, 66, 44, 93, 13, 29, 82, 62, 6, 14, 72, 55, 40},
    {27, 18, 18, 13, 78, 29, 3, 9, 14, 85, 98, 30, 66, 31, 19, 56, 85, 11, 100, 82, 78, 38, 98, 92, 47, 100, 69, 52, 37, 77, 99, 46},
    {24, 15, 58, 25, 36, 63, 61, 21, 48, 20, 33, 10, 91, 7, 69, 84, 72, 38, 41, 96, 88, 66, 45, 85, 84, 48, 10, 22, 70, 16, 86, 31},
    {92, 84, 46, 69, 33, 48, 31, 56, 96, 26, 29, 44, 100, 79, 84, 20, 32, 41, 82, 52, 5, 84, 57, 54, 21, 52, 85, 67, 67, 78, 88, 30},
    {64, 82, 50, 90, 69, 71, 71, 62, 69, 85, 37, 57, 87, 70, 28, 31, 88, 99, 31, 5, 98, 13, 93, 60, 26, 35, 88, 31, 60, 1, 54, 80}
};
std::vector < std::vector <double> > vectorC = {
    {99.36, 57.56, 11.54, 23.39, 48.9, 78.7, 78.27, 96.36, 1.61, 31.53, 95.23, 37.82, 29.85, 31.6, 42.5, 28.75, 72.98, 94.85, 52.41, 70.59, 61.26, 56.61, 31.37, 22.98, 66.38, 76.6, 48.13, 89.62, 71.09, 12.52, 68.31, 57.81},
    {66.6, 86.69, 3.13, 49.52, 50.93, 38.83, 18.78, 41.95, 6.38, 14.34, 12.42, 72.67, 92.08, 33.39, 74.0, 14.38, 43.38, 4.43, 11.88, 1.61, 51.34, 26.51, 57.55, 74.32, 69.66, 18.29, 3.56, 59.0, 61.36, 98.02, 3.15, 45.82},
    {8.51, 16.54, 67.47, 95.12, 59.48, 10.89, 51.18, 71.67, 13.71, 71.19, 79.03, 34.31, 40.42, 93.37, 88.95, 16.62, 71.83, 42.72, 59.26, 88.53, 85.88, 83.32, 3.75, 1.34, 1.41, 58.39, 20.05, 7.73, 28.11, 9.48, 21.95, 98.33},
    {17.64, 68.48, 25.78, 78.1, 7.78, 28.66, 17.84, 35.43, 27.36, 32.4, 77.8, 4.1, 36.74, 64.61, 21.07, 50.98, 73.42, 55.88, 2.46, 11.23, 65.33, 69.66, 66.73, 80.12, 60.75, 25.13, 78.72, 59.61, 88.58, 42.5, 37.04, 63.99},
    {95.38, 72.26, 27.66, 55.85, 43.13, 43.18, 16.22, 87.95, 37.66, 77.96, 55.72, 34.32, 48.46, 39.19, 60.59, 41.63, 73.06, 17.47, 17.44, 72.58, 65.09, 68.85, 67.69, 30.89, 96.33, 31.26, 42.1, 94.06, 25.09, 9.46, 23.44, 55.65},
    {64.15, 17.29, 7.64, 21.06, 93.72, 42.07, 57.31, 54.99, 25.04, 32.19, 13.5, 13.24, 83.62, 4.42, 31.16, 41.2, 44.0, 9.39, 61.49, 1.48, 52.08, 24.09, 11.92, 32.84, 76.84, 42.71, 94.54, 93.69, 79.67, 17.59, 99.92, 40.89},
    {71.87, 52.32, 40.2, 2.86, 77.27, 23.9, 0.86, 46.05, 86.12, 74.6, 39.99, 8.3, 40.36, 58.39, 49.99, 81.19, 88.9, 97.68, 67.41, 23.97, 19.2, 78.11, 7.55, 68.93, 84.43, 55.33, 24.79, 16.16, 18.37, 47.61, 23.88, 35.26},
    {50.66, 96.62, 0.86, 38.77, 89.89, 8.16, 6.01, 23.23, 89.47, 30.59, 95.47, 87.95, 4.8, 92.73, 85.28, 50.82, 89.16, 7.08, 27.93, 22.19, 9.78, 57.46, 85.34, 49.67, 99.64, 0.53, 98.64, 38.42, 42.47, 37.67, 60.6, 54.07},
    {86.57, 51.73, 65.59, 34.63, 1.46, 89.83, 60.09, 72.62, 23.5, 32.77, 58.98, 48.35, 95.6, 18.43, 88.82, 26.14, 65.39, 96.76, 2.22, 23.36, 8.15, 51.03, 38.04, 79.75, 87.58, 48.08, 68.87, 38.93, 91.48, 8.41, 37.03, 84.73},
    {0.35, 47.26, 81.39, 78.55, 71.14, 8.28, 40.75, 8.11, 33.19, 66.44, 41.36, 66.51, 53.03, 65.15, 4.07, 1.56, 84.52, 11.53, 75.66, 56.07, 75.26, 13.62, 24.79, 49.55, 78.55, 61.99, 79.24, 1.38, 88.5, 81.33, 75.53, 21.19},
    {42.1, 17.17, 81.17, 95.66, 52.48, 89.54, 8.12, 25.95, 83.37, 47.56, 87.56, 43.48, 46.86, 67.62, 34.84, 31.24, 41.5, 32.11, 68.7, 66.67, 38.0, 3.18, 82.46, 95.09, 79.11, 8.52, 33.22, 81.7, 77.75, 9.03, 35.79, 99.7},
    {51.09, 76.37, 49.01, 5.25, 34.95, 64.88, 18.71, 17.93, 0.04, 5.43, 50.6, 72.9, 51.76, 39.64, 6.71, 93.11, 83.21, 18.31, 13.18, 70.92, 37.8, 61.27, 29.52, 96.04, 23.62, 10.95, 45.23, 15.12, 76.86, 86.92, 47.02, 67.84},
    {83.47, 40.4, 99.87, 51.51, 97.58, 26.14, 38.02, 50.86, 99.98, 96.95, 14.44, 69.88, 53.78, 67.14, 11.84, 82.92, 92.24, 89.34, 49.1, 73.9, 25.6, 72.22, 79.96, 13.78, 39.02, 0.66, 50.12, 96.67, 53.63, 34.1, 14.21, 98.93},
    {0.8, 61.03, 67.51, 26.12, 63.28, 73.24, 35.71, 38.07, 56.75, 86.66, 75.1, 2.59, 14.4, 11.3, 79.32, 39.44, 28.29, 32.48, 6.99, 4.75, 3.14, 99.37, 31.09, 50.25, 94.22, 40.13, 58.54, 31.44, 76.23, 94.82, 54.44, 48.15},
    {33.24, 36.97, 2.56, 70.75, 99.76, 44.89, 62.98, 64.96, 94.76, 32.71, 26.91, 68.34, 75.26, 9.97, 63.67, 27.73, 53.87, 22.27, 27.23, 62.93, 79.54, 51.76, 63.62, 89.77, 97.63, 3.46, 48.97, 77.47, 65.22, 35.84, 31.36, 61.07},
    {33.2, 62.34, 30.94, 48.39, 47.11, 37.12, 19.11, 2.54, 88.7, 7.29, 60.06, 45.88, 23.31, 70.31, 74.38, 10.63, 68.22, 10.62, 55.53, 96.44, 26.14, 39.54, 63.34, 87.14, 40.34, 77.25, 52.56, 71.96, 86.66, 22.44, 10.5, 57.95},
    {39.49, 60.2, 3.63, 25.65, 42.99, 57.53, 2.86, 22.88, 97.51, 66.91, 14.6, 8.19, 53.25, 95.84, 70.34, 15.54, 56.74, 19.02, 19.45, 37.87, 52.2, 34.04, 36.55, 55.58, 32.73, 67.83, 54.66, 45.3, 8.09, 78.81, 51.91, 84.85},
    {49.69, 44.65, 15.14, 13.49, 58.85, 29.52, 78.26, 95.87, 95.79, 34.98, 30.97, 76.45, 80.26, 25.43, 53.8, 26.06, 68.67, 74.55, 59.46, 64.78, 36.83, 67.61, 43.12, 96.07, 54.12, 73.63, 57.85, 70.73, 86.74, 57.87, 87.77, 96.72},
    {62.28, 18.79, 80.98, 0.75, 2.77, 49.88, 22.48, 88.99, 54.9, 82.21, 46.27, 67.68, 14.6, 2.78, 58.76, 50.57, 56.36, 10.59, 21.5, 14.21, 34.45, 15.19, 11.92, 56.01, 96.81, 65.46, 4.65, 97.97, 7.55, 7.35, 0.03, 52.39},
    {88.02, 39.96, 57.0, 7.24, 20.32, 79.67, 64.6, 54.34, 51.01, 0.94, 17.72, 93.13, 9.3, 39.16, 40.32, 3.5, 1.89, 83.55, 3.88, 63.01, 42.5, 93.08, 41.81, 26.77, 98.55, 44.23, 83.18, 35.64, 12.36, 19.87, 78.06, 65.91},
    {39.0, 0.45, 89.33, 92.23, 0.01, 14.96, 81.35, 46.9, 13.83, 71.64, 27.06, 11.0, 58.3, 24.77, 10.4, 86.54, 11.68, 59.43, 86.71, 96.51, 4.3, 63.52, 13.93, 14.34, 34.28, 65.75, 66.36, 27.6, 76.94, 84.62, 30.56, 65.47},
    {7.85, 86.56, 43.32, 99.76, 28.11, 26.78, 87.8, 49.35, 83.44, 14.89, 73.47, 5.97, 48.77, 34.75, 86.49, 21.21, 32.19, 85.55, 12.06, 68.61, 60.71, 28.81, 48.38, 35.99, 47.16, 84.97, 70.72, 32.35, 68.71, 2.18, 35.23, 71.19},
    {77.7, 30.51, 75.09, 99.05, 0.85, 56.55, 39.66, 99.6, 33.23, 99.47, 95.64, 82.32, 24.69, 45.44, 21.4, 5.8, 57.42, 71.66, 6.8, 28.83, 30.55, 61.61, 21.75, 86.07, 4.56, 35.59, 46.83, 61.89, 31.73, 41.9, 93.25, 97.81},
    {89.95, 68.12, 28.43, 83.7, 43.79, 77.59, 31.66, 69.13, 70.56, 62.21, 67.42, 89.7, 33.84, 46.31, 65.8, 84.06, 1.72, 52.82, 96.75, 96.14, 12.95, 47.97, 89.36, 62.74, 25.35, 95.83, 0.43, 34.4, 25.01, 57.84, 40.9, 58.45},
    {81.18, 27.09, 78.28, 81.58, 36.01, 23.2, 77.45, 94.17, 0.88, 98.22, 56.17, 9.97, 68.67, 63.1, 46.42, 99.91, 13.09, 57.18, 81.99, 96.26, 52.57, 93.76, 55.39, 0.82, 38.54, 11.67, 55.92, 39.24, 80.69, 94.85, 27.05, 92.67},
    {11.61, 93.76, 72.72, 70.67, 36.56, 13.02, 52.94, 52.88, 53.34, 68.3, 7.0, 65.97, 10.69, 85.44, 67.03, 29.28, 78.3, 48.45, 22.73, 14.36, 75.92, 68.49, 38.84, 84.47, 63.13, 2.75, 88.52, 55.21, 67.01, 69.3, 87.89, 83.6},
    {17.97, 35.57, 88.0, 60.72, 64.33, 40.15, 90.89, 53.74, 43.69, 56.37, 77.33, 73.04, 60.38, 23.36, 20.29, 69.74, 15.94, 78.92, 31.68, 55.06, 95.51, 35.01, 43.03, 79.33, 32.27, 43.59, 8.05, 19.81, 98.03, 95.35, 36.06, 66.0},
    {85.32, 38.07, 45.26, 53.87, 58.7, 67.36, 79.32, 32.7, 41.35, 41.7, 9.23, 66.46, 82.08, 99.65, 15.97, 70.1, 60.33, 26.74, 2.47, 70.89, 42.72, 8.94, 93.01, 13.93, 30.04, 25.06, 14.37, 31.59, 53.48, 40.65, 47.94, 8.06},
    {58.05, 76.44, 17.52, 73.1, 70.03, 84.89, 43.07, 17.92, 65.72, 74.71, 80.53, 94.19, 90.94, 56.75, 24.86, 20.51, 21.0, 89.15, 43.36, 6.17, 62.03, 75.47, 29.21, 92.99, 49.15, 33.0, 75.35, 2.94, 23.91, 45.9, 81.73, 84.17},
    {41.57, 57.0, 41.43, 57.43, 73.12, 23.9, 14.46, 43.06, 85.57, 11.08, 84.65, 52.54, 39.0, 57.03, 80.6, 20.06, 71.59, 30.55, 4.59, 35.77, 5.26, 5.42, 22.32, 20.52, 15.03, 65.07, 73.55, 88.69, 25.76, 74.74, 48.92, 78.7},
    {77.78, 55.96, 5.01, 90.04, 70.58, 19.43, 58.38, 12.17, 25.45, 71.6, 41.9, 23.23, 55.81, 56.18, 90.41, 32.34, 64.32, 30.62, 3.66, 73.82, 82.04, 82.81, 9.14, 25.95, 95.73, 49.11, 16.05, 46.79, 12.96, 97.18, 47.16, 72.5},
    {1.87, 48.55, 8.77, 4.71, 50.92, 25.87, 93.69, 38.82, 68.98, 89.98, 66.6, 3.86, 46.78, 98.33, 99.73, 22.33, 46.02, 10.48, 41.47, 63.7, 22.24, 51.75, 50.75, 63.48, 91.7, 45.97, 71.73, 47.88, 86.57, 35.81, 29.83, 73.26}
};
std::vector < std::vector <double> > vectorD = {
    {6.14, 97.65, 70.74, 78.06, 90.63, 66.67, 76.29, 69.18, 91.62, 78.85, 0.29, 81.57, 39.47, 74.23, 70.09, 27.75, 92.72, 28.26, 39.33, 48.27, 0.02, 68.79, 70.35, 27.08, 6.5, 68.58, 35.05, 21.19, 84.34, 2.91, 6.57, 99.74},
    {57.65, 35.43, 80.21, 91.57, 4.05, 26.3, 58.68, 71.68, 36.77, 34.95, 33.44, 78.34, 67.81, 89.29, 14.75, 2.93, 52.24, 26.69, 34.07, 66.35, 73.62, 14.49, 25.32, 93.03, 86.46, 56.2, 94.77, 99.81, 34.94, 29.27, 33.36, 46.11},
    {55.42, 99.11, 51.08, 57.09, 95.46, 26.42, 68.38, 68.72, 66.92, 79.13, 33.7, 97.83, 5.98, 53.59, 59.64, 27.79, 28.86, 99.11, 47.99, 72.02, 72.57, 82.5, 10.44, 12.13, 83.95, 45.12, 53.57, 74.79, 0.32, 10.02, 14.76, 35.12},
    {84.85, 10.49, 54.93, 78.59, 65.09, 10.11, 78.31, 52.84, 38.49, 4.59, 22.66, 31.88, 6.31, 31.25, 18.99, 85.98, 83.11, 85.41, 4.31, 91.91, 90.22, 68.17, 46.16, 16.72, 22.03, 11.13, 48.79, 2.71, 3.08, 18.66, 17.42, 24.35},
    {43.87, 22.51, 82.77, 35.49, 77.5, 7.38, 38.71, 47.86, 33.19, 7.14, 54.86, 58.97, 3.56, 71.06, 94.36, 26.18, 74.18, 53.98, 54.79, 66.11, 30.78, 96.62, 44.69, 11.45, 91.38, 24.84, 92.16, 14.77, 60.63, 69.11, 13.66, 4.06},
    {12.95, 22.01, 6.63, 20.65, 23.97, 95.1, 32.03, 75.98, 92.08, 59.13, 29.93, 34.42, 24.12, 18.59, 90.56, 6.05, 85.68, 91.99, 58.22, 25.32, 28.95, 71.81, 62.96, 43.59, 77.7, 28.06, 19.25, 84.71, 93.35, 50.08, 47.28, 48.26},
    {21.65, 36.97, 80.24, 76.15, 54.96, 44.08, 34.0, 27.35, 81.95, 8.27, 75.81, 67.2, 53.57, 41.42, 25.79, 24.97, 68.01, 61.55, 71.54, 55.92, 85.77, 5.3, 28.91, 82.35, 48.28, 37.72, 85.81, 89.55, 88.05, 59.64, 34.28, 22.08},
    {0.55, 92.63, 52.02, 3.28, 3.73, 40.93, 35.64, 16.83, 5.42, 43.82, 82.04, 6.8, 64.23, 26.1, 98.38, 92.28, 30.28, 30.26, 6.21, 5.56, 0.01, 82.18, 53.95, 46.61, 44.84, 70.59, 28.54, 6.52, 42.13, 12.29, 59.96, 12.86},
    {20.16, 84.65, 48.23, 65.72, 58.92, 8.87, 42.19, 24.61, 41.43, 18.27, 53.8, 29.43, 4.23, 82.46, 91.92, 58.82, 90.72, 27.69, 20.07, 15.7, 16.7, 78.25, 6.0, 4.38, 70.07, 2.72, 62.15, 66.05, 46.17, 58.58, 85.3, 69.91},
    {83.19, 26.41, 12.32, 5.82, 19.67, 1.92, 18.94, 59.75, 34.35, 20.52, 66.16, 70.86, 79.72, 81.23, 58.75, 88.77, 86.14, 95.88, 10.76, 70.04, 19.91, 62.6, 52.64, 38.73, 1.48, 40.77, 49.31, 52.62, 76.41, 63.86, 78.19, 17.9},
    {17.59, 90.25, 3.84, 32.86, 42.69, 57.1, 90.02, 72.61, 21.62, 38.65, 69.89, 99.31, 14.45, 37.28, 45.05, 87.21, 40.26, 61.4, 58.59, 81.16, 45.5, 78.3, 95.15, 84.91, 44.39, 69.86, 28.31, 58.76, 19.35, 80.47, 56.85, 77.58},
    {16.53, 55.89, 33.16, 78.95, 24.29, 46.7, 94.31, 56.1, 15.03, 18.11, 99.78, 85.9, 92.31, 26.69, 15.16, 12.45, 7.24, 6.69, 88.5, 89.73, 21.87, 34.18, 96.46, 78.91, 97.29, 98.24, 2.29, 70.28, 70.33, 79.27, 97.23, 82.16},
    {16.25, 89.17, 63.11, 28.9, 23.82, 43.09, 29.83, 29.36, 66.56, 62.45, 11.31, 54.13, 88.97, 45.24, 84.27, 38.4, 54.99, 39.6, 98.38, 18.13, 31.62, 78.65, 34.49, 21.3, 11.45, 97.07, 39.53, 90.97, 3.97, 6.04, 27.69, 84.29},
    {83.66, 3.58, 27.61, 39.76, 95.26, 56.48, 56.55, 43.16, 57.34, 3.78, 35.41, 48.5, 60.69, 49.56, 92.31, 52.47, 56.86, 25.79, 57.62, 9.92, 64.56, 58.23, 93.15, 69.39, 33.5, 8.24, 75.62, 14.32, 58.98, 95.3, 55.28, 93.35},
    {1.46, 27.67, 62.97, 52.97, 10.64, 21.03, 74.22, 40.15, 17.22, 74.14, 64.0, 37.12, 14.49, 15.43, 37.11, 27.74, 8.4, 55.95, 77.82, 0.13, 79.57, 77.71, 8.81, 34.43, 41.68, 25.87, 25.57, 2.43, 10.29, 24.79, 27.05, 3.08},
    {64.41, 44.36, 56.89, 54.43, 80.04, 17.29, 88.73, 14.12, 19.03, 8.64, 93.68, 95.16, 7.02, 80.65, 47.82, 39.35, 69.65, 87.19, 2.49, 52.87, 51.92, 84.78, 88.82, 58.25, 71.22, 25.05, 39.64, 49.27, 86.56, 66.76, 88.63, 78.23},
    {77.05, 63.33, 34.8, 40.2, 5.34, 45.78, 80.54, 50.75, 82.73, 20.1, 7.41, 13.36, 50.68, 36.32, 21.65, 75.05, 29.81, 71.03, 44.38, 37.36, 41.42, 96.86, 56.81, 24.49, 15.02, 65.73, 15.22, 39.4, 71.24, 33.57, 53.66, 69.31},
    {3.78, 2.84, 69.72, 75.47, 69.46, 69.66, 5.79, 91.06, 58.02, 11.53, 20.41, 16.42, 1.11, 90.09, 48.08, 82.54, 91.31, 70.51, 22.61, 77.55, 94.14, 37.34, 87.22, 1.84, 60.55, 68.29, 63.47, 5.98, 92.53, 95.99, 94.5, 90.79},
    {77.87, 10.03, 42.71, 7.51, 56.8, 3.6, 91.19, 49.45, 52.71, 37.92, 55.98, 10.02, 73.88, 32.73, 71.88, 50.41, 0.49, 20.25, 35.51, 84.39, 90.12, 46.95, 74.3, 51.4, 27.12, 68.31, 24.4, 91.84, 75.51, 21.83, 48.33, 11.42},
    {94.72, 64.36, 70.68, 28.93, 51.51, 33.78, 41.83, 21.77, 53.17, 44.13, 73.5, 60.18, 25.51, 13.6, 17.18, 50.84, 13.84, 95.42, 88.45, 84.5, 71.78, 99.22, 78.5, 89.23, 49.89, 3.73, 33.85, 79.83, 16.37, 12.76, 77.23, 2.7},
    {56.41, 76.7, 55.0, 95.62, 78.99, 78.73, 10.29, 90.56, 74.85, 16.83, 98.41, 3.89, 37.35, 6.72, 9.96, 10.55, 94.19, 67.3, 73.58, 81.69, 53.75, 52.25, 53.51, 12.19, 56.86, 62.99, 89.12, 51.21, 91.34, 36.02, 25.39, 69.13},
    {7.06, 35.37, 78.76, 49.59, 73.12, 76.85, 58.81, 28.55, 40.69, 55.08, 20.59, 8.11, 75.37, 35.99, 76.19, 20.01, 82.79, 26.34, 34.28, 35.37, 72.46, 88.0, 35.1, 68.45, 89.67, 3.03, 7.48, 42.95, 93.33, 53.05, 7.66, 89.31},
    {19.47, 14.91, 30.97, 6.57, 2.75, 79.91, 47.69, 72.62, 24.94, 58.79, 39.38, 97.33, 12.07, 28.77, 22.27, 83.3, 43.1, 50.22, 29.41, 12.64, 29.58, 89.07, 58.44, 8.04, 45.83, 32.56, 53.35, 54.39, 37.87, 22.34, 45.99, 34.41},
    {54.69, 61.07, 0.88, 21.25, 72.06, 64.45, 74.27, 56.47, 8.34, 97.48, 59.34, 85.73, 12.1, 18.05, 43.65, 7.3, 26.32, 46.91, 34.28, 99.59, 0.53, 28.17, 34.08, 64.59, 89.94, 96.06, 14.47, 0.43, 84.05, 12.15, 77.68, 8.57},
    {30.19, 59.75, 67.1, 44.68, 19.75, 69.06, 7.45, 65.3, 40.9, 62.79, 6.63, 83.95, 30.1, 13.94, 28.71, 64.42, 15.99, 87.06, 90.63, 24.8, 58.48, 95.11, 92.37, 25.0, 16.5, 90.17, 25.38, 64.03, 92.5, 0.26, 72.41, 92.89},
    {15.9, 28.22, 1.06, 95.3, 49.34, 44.72, 34.19, 6.84, 25.99, 7.7, 38.58, 28.09, 24.97, 44.61, 52.5, 26.5, 34.1, 71.67, 26.87, 92.08, 57.09, 51.35, 27.19, 28.63, 26.81, 55.15, 88.39, 73.33, 11.91, 66.58, 1.3, 3.53},
    {54.93, 78.77, 41.69, 44.72, 37.5, 38.14, 18.53, 74.89, 45.58, 55.36, 3.09, 93.71, 68.79, 94.62, 84.41, 38.75, 69.08, 35.64, 27.12, 87.61, 84.64, 17.33, 38.46, 38.79, 97.86, 98.46, 85.59, 37.63, 47.03, 0.39, 72.92, 9.58},
    {30.6, 52.72, 69.98, 18.2, 94.53, 45.49, 91.76, 24.13, 12.81, 36.75, 56.57, 73.02, 54.52, 41.76, 30.43, 50.31, 19.43, 42.68, 63.8, 84.12, 81.11, 12.59, 95.17, 58.97, 21.19, 95.03, 96.01, 99.97, 46.56, 49.42, 62.18, 31.12},
    {87.56, 98.88, 61.96, 45.85, 31.71, 11.33, 53.41, 2.19, 48.74, 80.71, 68.32, 84.1, 86.08, 80.67, 97.58, 68.46, 37.53, 18.55, 59.89, 97.12, 87.23, 23.89, 43.67, 95.22, 69.38, 96.27, 13.27, 80.49, 33.98, 35.67, 81.44, 73.29},
    {95.42, 10.23, 89.49, 50.45, 32.76, 33.49, 86.21, 27.93, 79.26, 24.27, 83.98, 75.98, 44.51, 65.36, 63.77, 26.95, 52.85, 29.75, 84.97, 49.82, 32.75, 28.61, 12.25, 93.89, 36.39, 24.85, 0.74, 63.3, 34.91, 82.94, 27.9, 49.59},
    {94.39, 29.37, 70.85, 76.53, 1.57, 42.54, 65.67, 80.62, 11.45, 83.82, 94.97, 1.23, 64.19, 82.18, 58.46, 48.94, 54.28, 2.37, 20.36, 51.73, 25.23, 7.76, 85.19, 6.26, 36.23, 27.91, 34.97, 9.55, 58.06, 31.67, 83.78, 63.24},
    {97.31, 46.8, 59.68, 28.75, 90.91, 76.57, 93.96, 31.66, 92.98, 69.38, 79.11, 71.94, 7.75, 25.26, 10.68, 22.96, 31.95, 56.8, 36.17, 94.68, 40.73, 40.87, 87.71, 72.11, 27.92, 1.72, 67.43, 99.63, 90.11, 54.55, 20.0, 46.51}
};

std::vector < std::vector <int64_t> > vectorE = {
    {41, 13, 72, 13},
    {77, 96, 75, 19},
    {68, 65, 60, 21},
    {26, 78, 56, 69}
};
std::vector < std::vector <int64_t> > vectorF = {
    {70, 56, 48, 99},
    {82, 96, 74, 8},
    {53, 76, 95, 10},
    {95, 9, 34, 31}
};
std::vector < std::vector <double> > vectorG = {
    {35.82, 80.76, 60.55, 40.41},
    {99.21, 8.79, 9.42, 16.01},
    {79.93, 72.15, 81.73, 42.39},
    {28.12, 51.21, 34.89, 91.46}
};
std::vector < std::vector <double> > vectorH = {
    {98.67, 98.8, 38.4, 40.76},
    {68.76, 44.36, 81.63, 84.79},
    {83.92, 15.86, 53.99, 48.96},
    {9.51, 90.7, 58.33, 57.43}
};

std::vector < std::vector < Ciphertext<DCRTPoly> > > helper(CryptoContext<DCRTPoly> cryptoContext, std::vector < Ciphertext<DCRTPoly> > arg1, std::vector < Ciphertext<DCRTPoly> > arg2, size_t m, size_t l, size_t p){
    std::vector < std::vector < Ciphertext<DCRTPoly> > > res(m, std::vector < Ciphertext<DCRTPoly> >(p));
    for (size_t i = 0; i < m; ++i){
        for (size_t j = 0; j < p; ++j){
            res[i][j] = cryptoContext->EvalMult(arg1[i], arg2[j]);
        }
    }
    return res;
}

std::vector < std::vector <int64_t> > multiply(CryptoContext<DCRTPoly> cryptoContext, KeyPair<DCRTPoly> keyPair, std::vector < std::vector <int64_t> > arg1, std::vector < std::vector <int64_t> > arg2){
    size_t m = arg1.size(), l = arg1[0].size(), n = arg2[0].size();
    std::vector < lbcrypto::Ciphertext<lbcrypto::DCRTPoly> > ciphertextArg1, ciphertextArg2;
    for (size_t i = 0; i < m; ++i){
        lbcrypto::Plaintext plaintext = cryptoContext->MakePackedPlaintext(arg1[i]);
        ciphertextArg1.push_back(cryptoContext->Encrypt(keyPair.publicKey, plaintext));
    }
    for (size_t j = 0; j < n; ++j){
        std::vector <int64_t> temp;
        for (size_t i = 0; i < l; ++i)
            temp.push_back(arg2[i][j]);
        lbcrypto::Plaintext plaintext = cryptoContext->MakePackedPlaintext(temp);
        ciphertextArg2.push_back(cryptoContext->Encrypt(keyPair.publicKey, plaintext));
    }

    std::vector < std::vector <int64_t> > res(m, std::vector<int64_t>(n));
    auto encryptedRes = helper(cryptoContext, ciphertextArg1, ciphertextArg2, m, l, n);
    for (size_t i = 0; i < m; ++i){
        for (size_t j = 0; j < n; ++j){
            int64_t sum = 0;
            Plaintext plaintextJ;
            cryptoContext->Decrypt(keyPair.secretKey, encryptedRes[i][j], &plaintextJ);
            for (size_t k = 0; k < l; ++k){
                sum += plaintextJ->GetPackedValue()[k];
            }
            res[i][j] = sum;
        }
    }

    return res;
}

std::vector < std::vector <double> > multiply(CryptoContext<DCRTPoly> cryptoContext, KeyPair<DCRTPoly> keyPair, std::vector < std::vector <double> > arg1, std::vector < std::vector <double> > arg2){
    size_t m = arg1.size(), l = arg1[0].size(), n = arg2[0].size();
    std::vector < lbcrypto::Ciphertext<lbcrypto::DCRTPoly> > ciphertextArg1, ciphertextArg2;
    for (size_t i = 0; i < m; ++i){
        lbcrypto::Plaintext plaintext = cryptoContext->MakeCKKSPackedPlaintext(arg1[i], 1, 0, nullptr, l);
        ciphertextArg1.push_back(cryptoContext->Encrypt(keyPair.publicKey, plaintext));
    }
    for (size_t j = 0; j < n; ++j){
        std::vector <double> temp;
        for (size_t i = 0; i < l; ++i)
            temp.push_back(arg2[i][j]);
        lbcrypto::Plaintext plaintext = cryptoContext->MakeCKKSPackedPlaintext(temp, 1, 0, nullptr, l);
        ciphertextArg2.push_back(cryptoContext->Encrypt(keyPair.publicKey, plaintext));
    }

    std::vector < std::vector <double> > res(m, std::vector<double>(n));
    auto encryptedRes = helper(cryptoContext, ciphertextArg1, ciphertextArg2, m, l, n);
    for (size_t i = 0; i < m; ++i){
        for (size_t j = 0; j < n; ++j){
            double sum = 0;
            Plaintext plaintextJ;
            cryptoContext->Decrypt(keyPair.secretKey, encryptedRes[i][j], &plaintextJ);
            for (size_t k = 0; k < l; ++k){
                sum += plaintextJ->GetRealPackedValue()[k];
            }
            res[i][j] = sum;
        }
    }

    return res;
}

signed main(){

    CCParams<CryptoContextBGVRNS> BGVParams;
    BGVParams.SetMultiplicativeDepth(3);
    BGVParams.SetPlaintextModulus(65537);
    auto BGVContext = GenCryptoContext(BGVParams);
    BGVContext->Enable(PKE);
    BGVContext->Enable(KEYSWITCH);
    BGVContext->Enable(LEVELEDSHE);
    BGVContext->Enable(ADVANCEDSHE);

    CCParams<CryptoContextBFVRNS> BFVParams;
    BFVParams.SetMultiplicativeDepth(3);
    BFVParams.SetPlaintextModulus(65537);
    auto BFVContext = GenCryptoContext(BFVParams);
    BFVContext->Enable(PKE);
    BFVContext->Enable(KEYSWITCH);
    BFVContext->Enable(LEVELEDSHE);
    BFVContext->Enable(ADVANCEDSHE);

    CCParams<CryptoContextCKKSRNS> CKKSParams;
    CKKSParams.SetMultiplicativeDepth(3);
    CKKSParams.SetScalingModSize(50);
    CKKSParams.SetBatchSize(8);
    auto CKKSContext = GenCryptoContext(CKKSParams);
    CKKSContext->Enable(PKE);
    CKKSContext->Enable(KEYSWITCH);
    CKKSContext->Enable(LEVELEDSHE);
    CKKSContext->Enable(ADVANCEDSHE);

    auto BGVKeypair = BGVContext->KeyGen();
    auto BFVKeypair = BFVContext->KeyGen();
    auto CKKSKeypair = CKKSContext->KeyGen();

    BGVContext->EvalMultKeyGen(BGVKeypair.secretKey);
    BFVContext->EvalMultKeyGen(BFVKeypair.secretKey);
    CKKSContext->EvalMultKeyGen(CKKSKeypair.secretKey);

    {
        auto BGVmulABresult = multiply(BGVContext, BGVKeypair, vectorA, vectorB);
        for (auto i: BGVmulABresult){
            for (auto j: i){
                std::cout << j << ' ';
            }
            std::cout << std::endl;
        }

        auto BFVmulABresult = multiply(BFVContext, BFVKeypair, vectorA, vectorB);
        for (auto i: BFVmulABresult){
            for (auto j: i){
                std::cout << j << ' ';
            }
            std::cout << std::endl;
        }

        auto CKKSmulCDresult = multiply(CKKSContext, CKKSKeypair, vectorC, vectorD);
        for (auto i: CKKSmulCDresult){
            for (auto j: i){
                std::cout << j << ' ';
            }
            std::cout << std::endl;
        }
    }

    return 0;
}